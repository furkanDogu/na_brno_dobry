{"version":3,"file":"static/webpack/static\\development\\pages\\login\\graphql.js.a3b986ef5dbd8271ff28.hot-update.js","sources":["webpack:///./pages/login/graphql.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Mutation, MutationFn, ApolloConsumer } from \"react-apollo\";\r\nimport { NextPage, NextPageContext } from \"next\";\r\nimport nextCookie from \"next-cookies\";\r\nimport Router from \"next/router\";\r\n\r\nimport LoginForm from \".\";\r\nimport getUserFromToken from \"../../libs/authentication/getUserFromToken\";\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation LoginMutation($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n    }\r\n  }\r\n`;\r\nconst REGISTER_MUTATION = gql`\r\n  mutation RegisterMutation(\r\n    $role: UserRole\r\n    $name: String!\r\n    $surname: String!\r\n    $password: String!\r\n    $email: String!\r\n    $birthday: String!\r\n  ) {\r\n    registerUser(\r\n      role: $role\r\n      name: $name\r\n      surname: $surname\r\n      password: $password\r\n      email: $email\r\n      birthday: $birthday\r\n    ) {\r\n      token\r\n      user {\r\n        id\r\n        role\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst LoginFormGQL: NextPage = () => {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  return (\r\n    <>\r\n      <ApolloConsumer>\r\n        {client => (\r\n          <Mutation mutation={isLogin ? LOGIN_MUTATION : REGISTER_MUTATION}>\r\n            {(login: MutationFn) => (\r\n              <LoginForm\r\n                login={login}\r\n                isLogin={isLogin}\r\n                onSetLogin={setIsLogin}\r\n                apolloClient={client}\r\n              />\r\n            )}\r\n          </Mutation>\r\n        )}\r\n      </ApolloConsumer>\r\n    </>\r\n  );\r\n};\r\n\r\nLoginFormGQL.getInitialProps = async (context: NextPageContext) => {\r\n  const { auth_token } = nextCookie(context);\r\n  const user = getUserFromToken(auth_token);\r\n\r\n  if (context.res && user) {\r\n    context.res.writeHead(302, { Location: \"/\" });\r\n    context.res.end();\r\n    return {};\r\n  }\r\n\r\n  if (user) {\r\n    Router.push(\"/products\", \"/\");\r\n  }\r\n  return {};\r\n};\r\n\r\nexport default LoginFormGQL;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAOA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAJA;AADA;AAFA;AAeA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AANA;AACA;AADA;AAUA;AACA;AACA;AACA;AAbA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAeA;;;;A","sourceRoot":""}