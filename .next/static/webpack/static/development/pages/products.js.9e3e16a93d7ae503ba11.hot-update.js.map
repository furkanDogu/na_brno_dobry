{"version":3,"file":"static/webpack/static\\development\\pages\\products.js.9e3e16a93d7ae503ba11.hot-update.js","sources":["webpack:///./pages/products/index.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { NextComponentType, NextPageContext } from \"next\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport {\r\n  PRODUCTS_QUERY,\r\n  IProducts,\r\n  ICategories,\r\n  CATEGORIES_QUERY\r\n} from \"./graphql\";\r\nimport authentication from \"../../libs/authentication\";\r\nimport NewProductSectionGQL from \"./NewProductSection/graphql\";\r\nimport withModal from \"./../../hocs/withModal\";\r\nimport UpdateProductGQL from \"./UpdateProductSection/graphql\";\r\n\r\nconst Products: NextComponentType = props => {\r\n  // @ts-ignore\r\n  const { Modal } = props;\r\n  return (\r\n    <Query<IProducts> query={PRODUCTS_QUERY} variables={{ own: false }}>\r\n      {({ loading, error, data }) => (\r\n        <Query<ICategories> query={CATEGORIES_QUERY}>\r\n          {({ loading: l2, error: e2, data: d2 }) => {\r\n            if (l2 || loading) return <h2>Loading!</h2>;\r\n            if (error || e2)\r\n              return (\r\n                <h2>\r\n                  Error!{e2} {error}\r\n                </h2>\r\n              );\r\n            if (!data || !d2) return <h2>Error while getting data !</h2>;\r\n            return (\r\n              <div\r\n                style={{\r\n                  marginTop: 10,\r\n                  marginLeft: 200,\r\n                  marginRight: 200\r\n                }}>\r\n                <Table striped bordered hover>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>#</th>\r\n                      <th>ID</th>\r\n                      <th>Name</th>\r\n                      <th>Price</th>\r\n                      <th />\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {data.products.map((product, i) => {\r\n                      const { id, name, price, category } = product;\r\n                      return (\r\n                        <tr key={product.id}>\r\n                          <td>{i + 1}</td>\r\n                          <td>{id}</td>\r\n                          <td>{name}</td>\r\n                          <td>{price}</td>\r\n                          <td>\r\n                            <Button\r\n                              variant='outline-primary'\r\n                              onClick={() =>\r\n                                // @ts-ignore\r\n                                props.showModal({\r\n                                  id,\r\n                                  name,\r\n                                  price,\r\n                                  category\r\n                                })\r\n                              }>\r\n                              Change info\r\n                            </Button>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </Table>\r\n                <NewProductSectionGQL categories={d2.categories} />\r\n                <Modal dataFetched={d2.categories} />\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>\r\n      )}\r\n    </Query>\r\n  );\r\n};\r\n\r\nProducts.getInitialProps = (context: NextPageContext) => {\r\n  // check if the user is authenticated before page load.\r\n  authentication(context);\r\n\r\n  return {};\r\n};\r\n\r\nexport default withModal({\r\n  Component: Products,\r\n  Form: UpdateProductGQL,\r\n  header: \"Update Product\"\r\n});\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAMA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAAA;AAFA;AAgBA;AAGA;AAAA;AACA;AAAA;AAGA;AA7DA;AAkEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;;;;A","sourceRoot":""}