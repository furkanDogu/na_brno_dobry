{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation RegisterMutation(\\n    $role: UserRole\\n    $name: String!\\n    $surname: String!\\n    $password: String!\\n    $email: String!\\n    $birthday: String!\\n  ) {\\n    registerUser(\\n      role: $role\\n      name: $name\\n      surname: $surname\\n      password: $password\\n      email: $email\\n      birthday: $birthday\\n    ) {\\n      token\\n      user {\\n        id\\n        role\\n        email\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation LoginMutation($email: String!, $password: String!) {\\n    login(email: $email, password: $password) {\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Mutation, ApolloConsumer } from \"react-apollo\";\nimport nextCookie from \"next-cookies\";\nimport Router from \"next/router\";\nimport LoginForm from \".\";\nimport getUserFromToken from \"../../libs/authentication/getUserFromToken\";\nvar LOGIN_MUTATION = gql(_templateObject());\nvar REGISTER_MUTATION = gql(_templateObject2());\n\nvar LoginFormGQL = function LoginFormGQL() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLogin = _useState2[0],\n      setIsLogin = _useState2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(ApolloConsumer, null, function (client) {\n    return React.createElement(Mutation, {\n      mutation: isLogin ? LOGIN_MUTATION : REGISTER_MUTATION\n    }, function (login) {\n      return React.createElement(LoginForm, {\n        login: login,\n        isLogin: isLogin,\n        onSetLogin: setIsLogin,\n        apolloClient: client\n      });\n    });\n  }));\n};\n\nLoginFormGQL.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var _nextCookie, auth_token, user;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _nextCookie = nextCookie(context), auth_token = _nextCookie.auth_token;\n            user = getUserFromToken(auth_token);\n\n            if (!(context.res && user)) {\n              _context.next = 6;\n              break;\n            }\n\n            context.res.writeHead(302, {\n              Location: \"/\"\n            });\n            context.res.end();\n            return _context.abrupt(\"return\", {});\n\n          case 6:\n            if (user) {\n              Router.push(\"/products\", \"/\");\n            }\n\n            return _context.abrupt(\"return\", {});\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default LoginFormGQL;","map":{"version":3,"sources":["D:\\Projeler\\na_brno_dobry\\pages\\login\\graphql.tsx"],"names":["React","useState","gql","Mutation","ApolloConsumer","nextCookie","Router","LoginForm","getUserFromToken","LOGIN_MUTATION","REGISTER_MUTATION","LoginFormGQL","isLogin","setIsLogin","client","login","getInitialProps","context","auth_token","user","res","writeHead","Location","end","push"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,EAA+BC,cAA/B,QAAqD,cAArD;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,OAAOC,SAAP,MAAsB,GAAtB;AACA,OAAOC,gBAAP,MAA6B,4CAA7B;AAEA,IAAMC,cAAc,GAAGP,GAAH,mBAApB;AAOA,IAAMQ,iBAAiB,GAAGR,GAAH,oBAAvB;;AA2BA,IAAMS,YAAsB,GAAG,SAAzBA,YAAyB,GAAM;AAAA,kBACLV,QAAQ,CAAC,IAAD,CADH;AAAA;AAAA,MAC5BW,OAD4B;AAAA,MACnBC,UADmB;;AAEnC,SACE,0CACE,oBAAC,cAAD,QACG,UAAAC,MAAM;AAAA,WACL,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAEF,OAAO,GAAGH,cAAH,GAAoBC;AAA/C,OACG,UAACK,KAAD;AAAA,aACC,oBAAC,SAAD;AACE,QAAA,KAAK,EAAEA,KADT;AAEE,QAAA,OAAO,EAAEH,OAFX;AAGE,QAAA,UAAU,EAAEC,UAHd;AAIE,QAAA,YAAY,EAAEC;AAJhB,QADD;AAAA,KADH,CADK;AAAA,GADT,CADF,CADF;AAkBD,CApBD;;AAsBAH,YAAY,CAACK,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA+B,iBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACNZ,UAAU,CAACY,OAAD,CADJ,EACrBC,UADqB,eACrBA,UADqB;AAEvBC,YAAAA,IAFuB,GAEhBX,gBAAgB,CAACU,UAAD,CAFA;;AAAA,kBAIzBD,OAAO,CAACG,GAAR,IAAeD,IAJU;AAAA;AAAA;AAAA;;AAK3BF,YAAAA,OAAO,CAACG,GAAR,CAAYC,SAAZ,CAAsB,GAAtB,EAA2B;AAAEC,cAAAA,QAAQ,EAAE;AAAZ,aAA3B;AACAL,YAAAA,OAAO,CAACG,GAAR,CAAYG,GAAZ;AAN2B,6CAOpB,EAPoB;;AAAA;AAU7B,gBAAIJ,IAAJ,EAAU;AACRb,cAAAA,MAAM,CAACkB,IAAP,CAAY,WAAZ,EAAyB,GAAzB;AACD;;AAZ4B,6CAatB,EAbsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA;;AAgBA,eAAeb,YAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Mutation, MutationFn, ApolloConsumer } from \"react-apollo\";\r\nimport { NextPage, NextPageContext } from \"next\";\r\nimport nextCookie from \"next-cookies\";\r\nimport Router from \"next/router\";\r\n\r\nimport LoginForm from \".\";\r\nimport getUserFromToken from \"../../libs/authentication/getUserFromToken\";\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation LoginMutation($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n    }\r\n  }\r\n`;\r\nconst REGISTER_MUTATION = gql`\r\n  mutation RegisterMutation(\r\n    $role: UserRole\r\n    $name: String!\r\n    $surname: String!\r\n    $password: String!\r\n    $email: String!\r\n    $birthday: String!\r\n  ) {\r\n    registerUser(\r\n      role: $role\r\n      name: $name\r\n      surname: $surname\r\n      password: $password\r\n      email: $email\r\n      birthday: $birthday\r\n    ) {\r\n      token\r\n      user {\r\n        id\r\n        role\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst LoginFormGQL: NextPage = () => {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  return (\r\n    <>\r\n      <ApolloConsumer>\r\n        {client => (\r\n          <Mutation mutation={isLogin ? LOGIN_MUTATION : REGISTER_MUTATION}>\r\n            {(login: MutationFn) => (\r\n              <LoginForm\r\n                login={login}\r\n                isLogin={isLogin}\r\n                onSetLogin={setIsLogin}\r\n                apolloClient={client}\r\n              />\r\n            )}\r\n          </Mutation>\r\n        )}\r\n      </ApolloConsumer>\r\n    </>\r\n  );\r\n};\r\n\r\nLoginFormGQL.getInitialProps = async (context: NextPageContext) => {\r\n  const { auth_token } = nextCookie(context);\r\n  const user = getUserFromToken(auth_token);\r\n\r\n  if (context.res && user) {\r\n    context.res.writeHead(302, { Location: \"/\" });\r\n    context.res.end();\r\n    return {};\r\n  }\r\n\r\n  if (user) {\r\n    Router.push(\"/products\", \"/\");\r\n  }\r\n  return {};\r\n};\r\n\r\nexport default LoginFormGQL;\r\n"]},"metadata":{},"sourceType":"module"}