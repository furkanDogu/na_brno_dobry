{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport initApollo from \"./initApollo\";\nimport Head from \"next/head\";\nimport { getDataFromTree } from \"react-apollo\";\nimport cookie from 'cookie';\nexport var parseCookies = function parseCookies(req) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return cookie.parse(req ? req.headers.cookie || '' : document.cookie, options);\n};\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(Apollo, _React$Component);\n\n    _createClass(Apollo, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var Component, router, ccc, appProps, apollo, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  Component = ctx.Component, router = ctx.router, ccc = ctx.ctx;\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 5;\n                  return App.getInitialProps(ctx);\n\n                case 5:\n                  appProps = _context.sent;\n\n                case 6:\n                  // Run all GraphQL queries in the component tree\n                  // and extract the resulting data\n                  apollo = initApollo({}, {\n                    getToken: function getToken() {\n                      return parseCookies(ccc.req).auth_token;\n                    }\n                  });\n                  ctx.ctx.apolloClient = apollo;\n\n                  if (!(typeof window === \"undefined\")) {\n                    _context.next = 18;\n                    break;\n                  }\n\n                  _context.prev = 9;\n                  _context.next = 12;\n                  return getDataFromTree(React.createElement(App, _extends({}, appProps, {\n                    Component: Component,\n                    router: router,\n                    apolloClient: apollo\n                  })));\n\n                case 12:\n                  _context.next = 17;\n                  break;\n\n                case 14:\n                  _context.prev = 14;\n                  _context.t0 = _context[\"catch\"](9);\n                  console.error(\"Error while running `getDataFromTree`\", _context.t0);\n\n                case 17:\n                  Head.rewind();\n\n                case 18:\n                  apolloState = apollo.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 20:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[9, 14]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }() // runs only on client\n\n    }]);\n\n    function Apollo(props) {\n      var _this;\n\n      _classCallCheck(this, Apollo);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Apollo).call(this, props));\n      _this.apolloClient = initApollo(props.apolloState, {\n        getToken: function getToken() {\n          return parseCookies().auth_token;\n        }\n      });\n      return _this;\n    }\n\n    _createClass(Apollo, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(App, _extends({\n          apolloClient: this.apolloClient\n        }, this.props));\n      }\n    }]);\n\n    return Apollo;\n  }(React.Component), _defineProperty(_class, \"displayName\", \"withApollo(App)\"), _temp;\n});","map":{"version":3,"sources":["D:\\Projeler\\na_brno_dobry\\libs\\Apollo\\withApolloClient.js"],"names":["React","initApollo","Head","getDataFromTree","cookie","parseCookies","req","options","parse","headers","document","App","ctx","Component","router","ccc","appProps","getInitialProps","apollo","getToken","auth_token","apolloClient","window","console","error","rewind","apolloState","cache","extract","props"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAuB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;AACjD,SAAOH,MAAM,CAACI,KAAP,CAAaF,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAYL,MAAZ,IAAsB,EAAzB,GAA8BM,QAAQ,CAACN,MAAvD,EAA+DG,OAA/D,CAAP;AACD,CAFM;AAIP,gBAAe,UAACI,GAAD,EAAS;AAAA;;AACtB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAG+BC,GAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAIYC,kBAAAA,SAJZ,GAI4CD,GAJ5C,CAIYC,SAJZ,EAIuBC,MAJvB,GAI4CF,GAJ5C,CAIuBE,MAJvB,EAIoCC,GAJpC,GAI4CH,GAJ5C,CAI+BA,GAJ/B;AAMQI,kBAAAA,QANR,GAMmB,EANnB;;AAAA,uBAOQL,GAAG,CAACM,eAPZ;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAQuBN,GAAG,CAACM,eAAJ,CAAoBL,GAApB,CARvB;;AAAA;AAQMI,kBAAAA,QARN;;AAAA;AAWI;AACA;AAEME,kBAAAA,MAdV,GAcmBjB,UAAU,CAAC,EAAD,EAAK;AAAEkB,oBAAAA,QAAQ,EAAE;AAAA,6BAAMd,YAAY,CAACU,GAAG,CAACT,GAAL,CAAZ,CAAsBc,UAA5B;AAAA;AAAZ,mBAAL,CAd7B;AAeIR,kBAAAA,GAAG,CAACA,GAAJ,CAAQS,YAAR,GAAuBH,MAAvB;;AAfJ,wBAgBQ,OAAOI,MAAP,KAAkB,WAhB1B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBAkBcnB,eAAe,CAAC,oBAAC,GAAD,eAASa,QAAT;AAAmB,oBAAA,SAAS,EAAEH,SAA9B;AAAyC,oBAAA,MAAM,EAAEC,MAAjD;AAAyD,oBAAA,YAAY,EAAEI;AAAvE,qBAAD,CAlB7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoBQK,kBAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AApBR;AAsBMtB,kBAAAA,IAAI,CAACuB,MAAL;;AAtBN;AAyBUC,kBAAAA,WAzBV,GAyBwBR,MAAM,CAACS,KAAP,CAAaC,OAAb,EAzBxB;AAAA,qEA4BSZ,QA5BT;AA6BMU,oBAAAA,WAAW,EAAXA;AA7BN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAgCE;;AAhCF;;AAiCE,oBAAYG,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;AACA,YAAKR,YAAL,GAAoBpB,UAAU,CAAC4B,KAAK,CAACH,WAAP,EAAoB;AAAEP,QAAAA,QAAQ,EAAE;AAAA,iBAAMd,YAAY,GAAGe,UAArB;AAAA;AAAZ,OAApB,CAA9B;AAFiB;AAIlB;;AArCH;AAAA;AAAA,+BAuCW;AACP,eAAO,oBAAC,GAAD;AAAK,UAAA,YAAY,EAAE,KAAKC;AAAxB,WAA0C,KAAKQ,KAA/C,EAAP;AACD;AAzCH;;AAAA;AAAA,IAA4B7B,KAAK,CAACa,SAAlC,0CACuB,iBADvB;AA2CD,CA5CD","sourcesContent":["import React from \"react\";\r\nimport initApollo from \"./initApollo\";\r\nimport Head from \"next/head\";\r\nimport { getDataFromTree } from \"react-apollo\";\r\nimport cookie from 'cookie';\r\n\r\nexport const parseCookies = (req, options = {}) => {\r\n  return cookie.parse(req ? req.headers.cookie || '' : document.cookie, options);\r\n};\r\n\r\nexport default (App) => {\r\n  return class Apollo extends React.Component {\r\n    static displayName = \"withApollo(App)\";\r\n\r\n    static async getInitialProps(ctx) {\r\n      const { Component, router, ctx: ccc } = ctx;\r\n\r\n      let appProps = {};\r\n      if (App.getInitialProps) {\r\n        appProps = await App.getInitialProps(ctx);\r\n      }\r\n\r\n      // Run all GraphQL queries in the component tree\r\n      // and extract the resulting data\r\n\r\n      const apollo = initApollo({}, { getToken: () => parseCookies(ccc.req).auth_token });\r\n      ctx.ctx.apolloClient = apollo;\r\n      if (typeof window === \"undefined\") {\r\n        try {\r\n          await getDataFromTree(<App {...appProps} Component={Component} router={router} apolloClient={apollo} />);\r\n        } catch (error) {\r\n          console.error(\"Error while running `getDataFromTree`\", error);\r\n        }\r\n        Head.rewind();\r\n      }\r\n\r\n      const apolloState = apollo.cache.extract();\r\n\r\n      return {\r\n        ...appProps,\r\n        apolloState\r\n      };\r\n    }\r\n    // runs only on client\r\n    constructor(props) {\r\n      super(props);\r\n      this.apolloClient = initApollo(props.apolloState, { getToken: () => parseCookies().auth_token });\r\n\r\n    }\r\n\r\n    render() {\r\n      return <App apolloClient={this.apolloClient} {...this.props} />;\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}