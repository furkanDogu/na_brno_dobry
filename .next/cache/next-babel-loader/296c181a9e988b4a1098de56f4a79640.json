{"ast":null,"code":"import nextCookie from \"next-cookies\";\nimport getUserFromToken from \"./getUserFromToken\";\nimport Router from \"next/router\";\n\nvar authentication = function authentication(context) {\n  // reads the token in cookie (checks if res in context exists) according to the res, runs for client or server side.\n  var _nextCookie = nextCookie(context),\n      auth_token = _nextCookie.auth_token; // we check if the cookie is valid here. If token cannot be decoded, then it's invalid.\n\n\n  var user = getUserFromToken(auth_token); // if called on server\n\n  if (context.res && !user) {\n    context.res.writeHead(302, {\n      Location: \"/login\"\n    });\n    context.res.end();\n    return;\n  } // if called on client\n\n\n  if (!user) Router.push(\"/login/graphql\", \"/login\");\n};\n\nexport default authentication;","map":{"version":3,"sources":["D:\\Projeler\\na_brno_dobry\\libs\\authentication\\index.ts"],"names":["nextCookie","getUserFromToken","Router","authentication","context","auth_token","user","res","writeHead","Location","end","push"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAA8B;AACnD;AADmD,oBAE5BJ,UAAU,CAACI,OAAD,CAFkB;AAAA,MAE3CC,UAF2C,eAE3CA,UAF2C,EAInD;;;AACA,MAAMC,IAAI,GAAGL,gBAAgB,CAACI,UAAD,CAA7B,CALmD,CAMnD;;AACA,MAAID,OAAO,CAACG,GAAR,IAAe,CAACD,IAApB,EAA0B;AACxBF,IAAAA,OAAO,CAACG,GAAR,CAAYC,SAAZ,CAAsB,GAAtB,EAA2B;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAA3B;AACAL,IAAAA,OAAO,CAACG,GAAR,CAAYG,GAAZ;AACA;AACD,GAXkD,CAanD;;;AACA,MAAI,CAACJ,IAAL,EAAWJ,MAAM,CAACS,IAAP,CAAY,gBAAZ,EAA8B,QAA9B;AACZ,CAfD;;AAiBA,eAAeR,cAAf","sourcesContent":["import nextCookie from \"next-cookies\";\r\nimport getUserFromToken from \"./getUserFromToken\";\r\nimport { NextPageContext } from \"next\";\r\nimport Router from \"next/router\";\r\n\r\nconst authentication = (context: NextPageContext) => {\r\n  // reads the token in cookie (checks if res in context exists) according to the res, runs for client or server side.\r\n  const { auth_token } = nextCookie(context);\r\n\r\n  // we check if the cookie is valid here. If token cannot be decoded, then it's invalid.\r\n  const user = getUserFromToken(auth_token);\r\n  // if called on server\r\n  if (context.res && !user) {\r\n    context.res.writeHead(302, { Location: \"/login\" });\r\n    context.res.end();\r\n    return;\r\n  }\r\n\r\n  // if called on client\r\n  if (!user) Router.push(\"/login/graphql\", \"/login\");\r\n};\r\n\r\nexport default authentication;\r\n"]},"metadata":{},"sourceType":"module"}