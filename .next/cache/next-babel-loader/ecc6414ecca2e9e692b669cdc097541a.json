{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation AddProduct(\\n    $name: String!\\n    $price: Float!\\n    $ownerId: String!\\n    $categoryId: String!\\n  ) {\\n    addProduct(\\n      name: $name\\n      price: $price\\n      ownerId: $ownerId\\n      categoryId: $categoryId\\n    ) {\\n      id\\n      name\\n      price\\n      category {\\n        id\\n        name\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\nimport NewProductSection from \".\";\nimport { PRODUCTS_QUERY } from \"../graphql\";\nvar ADD_PRODUCT_MUTATION = gql(_templateObject());\n\nvar NewProductSectionGQL = function NewProductSectionGQL(props) {\n  return React.createElement(React.Fragment, null, React.createElement(Mutation, {\n    mutation: ADD_PRODUCT_MUTATION // @ts-ignore\n    ,\n    update: function update(cache, _ref) {\n      var addProduct = _ref.data.addProduct;\n      var data = cache.readQuery({\n        query: PRODUCTS_QUERY,\n        variables: {\n          own: false\n        }\n      });\n      cache.writeQuery({\n        query: PRODUCTS_QUERY,\n        variables: {\n          own: false\n        },\n        data: {\n          // @ts-ignore\n          products: [].concat(_toConsumableArray(data.products), [addProduct])\n        }\n      });\n    }\n  }, function (handleAddProduct) {\n    return React.createElement(NewProductSection, {\n      options: props.categories,\n      onAddProduct: handleAddProduct\n    });\n  }));\n};\n\nexport default NewProductSectionGQL;","map":{"version":3,"sources":["D:\\Projeler\\na_brno_dobry\\pages\\products\\NewProductSection\\graphql.tsx"],"names":["gql","Mutation","NewProductSection","PRODUCTS_QUERY","ADD_PRODUCT_MUTATION","NewProductSectionGQL","props","cache","addProduct","data","readQuery","query","variables","own","writeQuery","products","handleAddProduct","categories"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAqC,cAArC;AAEA,OAAOC,iBAAP,MAA8B,GAA9B;AACA,SAASC,cAAT,QAA+B,YAA/B;AAEA,IAAMC,oBAAoB,GAAGJ,GAAH,mBAA1B;;AA4BA,IAAMK,oBAAwD,GAAG,SAA3DA,oBAA2D,CAAAC,KAAK,EAAI;AACxE,SACE,0CACE,oBAAC,QAAD;AACE,IAAA,QAAQ,EAAEF,oBADZ,CAEE;AAFF;AAGE,IAAA,MAAM,EAAE,gBAACG,KAAD,QAAqC;AAAA,UAAnBC,UAAmB,QAA3BC,IAA2B,CAAnBD,UAAmB;AAC3C,UAAMC,IAAI,GAAGF,KAAK,CAACG,SAAN,CAAgB;AAC3BC,QAAAA,KAAK,EAAER,cADoB;AAE3BS,QAAAA,SAAS,EAAE;AAAEC,UAAAA,GAAG,EAAE;AAAP;AAFgB,OAAhB,CAAb;AAIAN,MAAAA,KAAK,CAACO,UAAN,CAAiB;AACfH,QAAAA,KAAK,EAAER,cADQ;AAEfS,QAAAA,SAAS,EAAE;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAFI;AAGfJ,QAAAA,IAAI,EAAE;AACJ;AACAM,UAAAA,QAAQ,+BAAMN,IAAI,CAACM,QAAX,IAAqBP,UAArB;AAFJ;AAHS,OAAjB;AAQD;AAhBH,KAiBG,UAAAQ,gBAAgB;AAAA,WACf,oBAAC,iBAAD;AACE,MAAA,OAAO,EAAEV,KAAK,CAACW,UADjB;AAEE,MAAA,YAAY,EAAED;AAFhB,MADe;AAAA,GAjBnB,CADF,CADF;AA4BD,CA7BD;;AA+BA,eAAeX,oBAAf","sourcesContent":["import gql from \"graphql-tag\";\r\nimport { Mutation, MutationFn } from \"react-apollo\";\r\n\r\nimport NewProductSection from \".\";\r\nimport { PRODUCTS_QUERY } from \"../graphql\";\r\n\r\nconst ADD_PRODUCT_MUTATION = gql`\r\n  mutation AddProduct(\r\n    $name: String!\r\n    $price: Float!\r\n    $ownerId: String!\r\n    $categoryId: String!\r\n  ) {\r\n    addProduct(\r\n      name: $name\r\n      price: $price\r\n      ownerId: $ownerId\r\n      categoryId: $categoryId\r\n    ) {\r\n      id\r\n      name\r\n      price\r\n      category {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\ninterface INewProductSectionprops {\r\n  categories: { id: string; name: string }[];\r\n}\r\n\r\nconst NewProductSectionGQL: React.SFC<INewProductSectionprops> = props => {\r\n  return (\r\n    <>\r\n      <Mutation<MutationFn>\r\n        mutation={ADD_PRODUCT_MUTATION}\r\n        // @ts-ignore\r\n        update={(cache, { data: { addProduct } }) => {\r\n          const data = cache.readQuery({\r\n            query: PRODUCTS_QUERY,\r\n            variables: { own: false }\r\n          });\r\n          cache.writeQuery({\r\n            query: PRODUCTS_QUERY,\r\n            variables: { own: false },\r\n            data: {\r\n              // @ts-ignore\r\n              products: [...data.products, addProduct]\r\n            }\r\n          });\r\n        }}>\r\n        {handleAddProduct => (\r\n          <NewProductSection\r\n            options={props.categories}\r\n            onAddProduct={handleAddProduct}\r\n          />\r\n        )}\r\n      </Mutation>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewProductSectionGQL;\r\n"]},"metadata":{},"sourceType":"module"}