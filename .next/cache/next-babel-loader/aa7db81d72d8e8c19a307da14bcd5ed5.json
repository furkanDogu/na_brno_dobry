{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport * as React from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Bootstrap from \"react-bootstrap\";\nimport Input from \"../../../components/Input\";\nimport Select from \"../../../components/Select\";\n\nvar UpdateProductForm = function UpdateProductForm(props) {\n  var _ref = props.params,\n      id = _ref.id,\n      name = _ref.name,\n      price = _ref.price,\n      category = _ref.category;\n\n  var handleSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(values) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return props.onUpdate({\n                variables: {\n                  name: values.name,\n                  productId: id,\n                  price: _parseFloat(values.price),\n                  categoryId: values.categoryId\n                }\n              });\n\n            case 2:\n              props.closeModal();\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(Formik, {\n    onSubmit: handleSubmit,\n    initialValues: {\n      id: id,\n      name: name,\n      price: price,\n      categoryId: category.id\n    }\n  }, function (_ref3) {\n    var errors = _ref3.errors,\n        touched = _ref3.touched;\n    return React.createElement(Form, null, React.createElement(Bootstrap.Form.Group, null, React.createElement(Input, {\n      name: \"name\",\n      label: \"Name\",\n      errors: errors,\n      touched: touched\n    }), React.createElement(Input, {\n      name: \"price\",\n      label: \"Price\",\n      errors: errors,\n      touched: touched\n    })), React.createElement(Select, {\n      options: props.dataFetched,\n      label: \"Category\",\n      name: \"categoryId\"\n    }), React.createElement(\"div\", {\n      style: {\n        marginTop: 20\n      }\n    }), React.createElement(Bootstrap.Button, {\n      variant: \"primary\",\n      type: \"submit\"\n    }, \"Update\"));\n  });\n};\n\nexport default UpdateProductForm;","map":{"version":3,"sources":["D:\\Projeler\\na_brno_dobry\\pages\\products\\UpdateProductSection\\index.tsx"],"names":["React","Formik","Form","Bootstrap","Input","Select","UpdateProductForm","props","params","id","name","price","category","handleSubmit","values","onUpdate","variables","productId","categoryId","closeModal","errors","touched","dataFetched","marginTop"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,OAAO,KAAKC,SAAZ,MAA2B,iBAA3B;AAEA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;;AAcA,IAAMC,iBAAqD,GAAG,SAAxDA,iBAAwD,CAAAC,KAAK,EAAI;AAAA,aAC/BA,KAAK,CAACC,MADyB;AAAA,MAC7DC,EAD6D,QAC7DA,EAD6D;AAAA,MACzDC,IADyD,QACzDA,IADyD;AAAA,MACnDC,KADmD,QACnDA,KADmD;AAAA,MAC5CC,QAD4C,QAC5CA,QAD4C;;AAGrE,MAAMC,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACbP,KAAK,CAACQ,QAAN,CAAe;AACnBC,gBAAAA,SAAS,EAAE;AACTN,kBAAAA,IAAI,EAAEI,MAAM,CAACJ,IADJ;AAETO,kBAAAA,SAAS,EAAER,EAFF;AAGTE,kBAAAA,KAAK,EAAE,YAAWG,MAAM,CAACH,KAAlB,CAHE;AAITO,kBAAAA,UAAU,EAAEJ,MAAM,CAACI;AAJV;AADQ,eAAf,CADa;;AAAA;AASnBX,cAAAA,KAAK,CAACY,UAAN;;AATmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZN,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAWA,SACE,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAEA,YADZ;AAEE,IAAA,aAAa,EAAE;AAAEJ,MAAAA,EAAE,EAAFA,EAAF;AAAMC,MAAAA,IAAI,EAAJA,IAAN;AAAYC,MAAAA,KAAK,EAALA,KAAZ;AAAmBO,MAAAA,UAAU,EAAEN,QAAQ,CAACH;AAAxC;AAFjB,KAGG;AAAA,QAAGW,MAAH,SAAGA,MAAH;AAAA,QAAWC,OAAX,SAAWA,OAAX;AAAA,WACC,oBAAC,IAAD,QACE,oBAAC,SAAD,CAAW,IAAX,CAAgB,KAAhB,QACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAC,MAAzB;AAAgC,MAAA,MAAM,EAAED,MAAxC;AAAgD,MAAA,OAAO,EAAEC;AAAzD,MADF,EAEE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,KAAK,EAAC,OAFR;AAGE,MAAA,MAAM,EAAED,MAHV;AAIE,MAAA,OAAO,EAAEC;AAJX,MAFF,CADF,EAUE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAEd,KAAK,CAACe,WADjB;AAEE,MAAA,KAAK,EAAC,UAFR;AAGE,MAAA,IAAI,EAAC;AAHP,MAVF,EAeE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb;AAAZ,MAfF,EAgBE,oBAAC,SAAD,CAAW,MAAX;AAAkB,MAAA,OAAO,EAAC,SAA1B;AAAoC,MAAA,IAAI,EAAC;AAAzC,gBAhBF,CADD;AAAA,GAHH,CADF;AA4BD,CA1CD;;AA4CA,eAAejB,iBAAf","sourcesContent":["import * as React from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Bootstrap from \"react-bootstrap\";\r\n\r\nimport Input from \"../../../components/Input\";\r\nimport Select from \"../../../components/Select\";\r\n\r\ninterface IUpdateProductFormProps {\r\n  params?: {\r\n    id: string;\r\n    name: string;\r\n    price: number;\r\n    category: { id: string; name: string };\r\n  };\r\n  onUpdate: (values: any) => Promise<any>;\r\n  dataFetched: { id: string; name: string }[];\r\n  closeModal: () => void;\r\n}\r\n\r\nconst UpdateProductForm: React.SFC<IUpdateProductFormProps> = props => {\r\n  const { id, name, price, category } = props.params!;\r\n\r\n  const handleSubmit = async (values: any) => {\r\n    await props.onUpdate({\r\n      variables: {\r\n        name: values.name,\r\n        productId: id,\r\n        price: parseFloat(values.price),\r\n        categoryId: values.categoryId\r\n      }\r\n    });\r\n    props.closeModal();\r\n  };\r\n  return (\r\n    <Formik\r\n      onSubmit={handleSubmit}\r\n      initialValues={{ id, name, price, categoryId: category.id }}>\r\n      {({ errors, touched }) => (\r\n        <Form>\r\n          <Bootstrap.Form.Group>\r\n            <Input name='name' label='Name' errors={errors} touched={touched} />\r\n            <Input\r\n              name='price'\r\n              label='Price'\r\n              errors={errors}\r\n              touched={touched}\r\n            />\r\n          </Bootstrap.Form.Group>\r\n          <Select\r\n            options={props.dataFetched}\r\n            label='Category'\r\n            name='categoryId'\r\n          />\r\n          <div style={{ marginTop: 20 }} />\r\n          <Bootstrap.Button variant='primary' type='submit'>\r\n            Update\r\n          </Bootstrap.Button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default UpdateProductForm;\r\n"]},"metadata":{},"sourceType":"module"}