{"ast":null,"code":"import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport { Table } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { PRODUCTS_QUERY, CATEGORIES_QUERY } from \"./graphql\";\nimport authentication from \"../../libs/authentication\";\nimport NewProductSectionGQL from \"./NewProductSection/graphql\";\nimport withModal from \"./../../hocs/withModal\";\nimport UpdateProductGQL from \"./UpdateProductSection/graphql\";\n\nvar Products = function Products(props) {\n  // @ts-ignore\n  var Modal = props.Modal;\n  return React.createElement(Query, {\n    query: PRODUCTS_QUERY,\n    variables: {\n      own: false\n    }\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        data = _ref.data;\n    return React.createElement(Query, {\n      query: CATEGORIES_QUERY\n    }, function (_ref2) {\n      var l2 = _ref2.loading,\n          e2 = _ref2.error,\n          d2 = _ref2.data;\n      if (l2 || loading) return React.createElement(\"h2\", null, \"Loading!\");\n      if (error || e2) return React.createElement(\"h2\", null, \"Error!\", e2, \" \", error);\n      if (!data || !d2) return React.createElement(\"h2\", null, \"Error while getting data !\");\n      return React.createElement(\"div\", {\n        style: {\n          marginTop: 10,\n          marginLeft: 200,\n          marginRight: 200\n        }\n      }, React.createElement(Table, {\n        striped: true,\n        bordered: true,\n        hover: true\n      }, React.createElement(\"thead\", null, React.createElement(\"tr\", null, React.createElement(\"th\", null, \"#\"), React.createElement(\"th\", null, \"ID\"), React.createElement(\"th\", null, \"Name\"), React.createElement(\"th\", null, \"Price\"), React.createElement(\"th\", null))), React.createElement(\"tbody\", null, data.products.map(function (product, i) {\n        var id = product.id,\n            name = product.name,\n            price = product.price,\n            category = product.category;\n        return React.createElement(\"tr\", {\n          key: product.id\n        }, React.createElement(\"td\", null, i), React.createElement(\"td\", null, id), React.createElement(\"td\", null, name), React.createElement(\"td\", null, price), React.createElement(\"td\", null, React.createElement(Button, {\n          variant: \"outline-primary\",\n          onClick: function onClick() {\n            return (// @ts-ignore\n              props.showModal({\n                id: id,\n                name: name,\n                price: price,\n                category: category\n              })\n            );\n          }\n        }, \"Change info\")));\n      }))), React.createElement(NewProductSectionGQL, {\n        categories: d2.categories\n      }), React.createElement(Modal, {\n        dataFetched: d2.categories\n      }));\n    });\n  });\n};\n\nProducts.getInitialProps = function (context) {\n  // check if the user is authenticated before page load.\n  authentication(context);\n  return {};\n};\n\nexport default withModal({\n  Component: Products,\n  Form: UpdateProductGQL,\n  header: \"Update Product\"\n});","map":{"version":3,"sources":["D:\\Projeler\\na_brno_dobry\\pages\\products\\index.tsx"],"names":["React","Query","Table","Button","PRODUCTS_QUERY","CATEGORIES_QUERY","authentication","NewProductSectionGQL","withModal","UpdateProductGQL","Products","props","Modal","own","loading","error","data","l2","e2","d2","marginTop","marginLeft","marginRight","products","map","product","i","id","name","price","category","showModal","categories","getInitialProps","context","Component","Form","header"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { NextComponentType, NextPageContext } from \"next\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport {\r\n  PRODUCTS_QUERY,\r\n  IProducts,\r\n  ICategories,\r\n  CATEGORIES_QUERY\r\n} from \"./graphql\";\r\nimport authentication from \"../../libs/authentication\";\r\nimport NewProductSectionGQL from \"./NewProductSection/graphql\";\r\nimport withModal from \"./../../hocs/withModal\";\r\nimport UpdateProductGQL from \"./UpdateProductSection/graphql\";\r\n\r\nconst Products: NextComponentType = props => {\r\n  // @ts-ignore\r\n  const { Modal } = props;\r\n  return (\r\n    <Query<IProducts> query={PRODUCTS_QUERY} variables={{ own: false }}>\r\n      {({ loading, error, data }) => (\r\n        <Query<ICategories> query={CATEGORIES_QUERY}>\r\n          {({ loading: l2, error: e2, data: d2 }) => {\r\n            if (l2 || loading) return <h2>Loading!</h2>;\r\n            if (error || e2)\r\n              return (\r\n                <h2>\r\n                  Error!{e2} {error}\r\n                </h2>\r\n              );\r\n            if (!data || !d2) return <h2>Error while getting data !</h2>;\r\n            return (\r\n              <div\r\n                style={{\r\n                  marginTop: 10,\r\n                  marginLeft: 200,\r\n                  marginRight: 200\r\n                }}>\r\n                <Table striped bordered hover>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>#</th>\r\n                      <th>ID</th>\r\n                      <th>Name</th>\r\n                      <th>Price</th>\r\n                      <th />\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {data.products.map((product, i) => {\r\n                      const { id, name, price, category } = product;\r\n                      return (\r\n                        <tr key={product.id}>\r\n                          <td>{i}</td>\r\n                          <td>{id}</td>\r\n                          <td>{name}</td>\r\n                          <td>{price}</td>\r\n                          <td>\r\n                            <Button\r\n                              variant='outline-primary'\r\n                              onClick={() =>\r\n                                // @ts-ignore\r\n                                props.showModal({\r\n                                  id,\r\n                                  name,\r\n                                  price,\r\n                                  category\r\n                                })\r\n                              }>\r\n                              Change info\r\n                            </Button>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </Table>\r\n                <NewProductSectionGQL categories={d2.categories} />\r\n                <Modal dataFetched={d2.categories} />\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>\r\n      )}\r\n    </Query>\r\n  );\r\n};\r\n\r\nProducts.getInitialProps = (context: NextPageContext) => {\r\n  // check if the user is authenticated before page load.\r\n  authentication(context);\r\n\r\n  return {};\r\n};\r\n\r\nexport default withModal({\r\n  Component: Products,\r\n  Form: UpdateProductGQL,\r\n  header: \"Update Product\"\r\n});\r\n"]},"metadata":{},"sourceType":"module"}