{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Bootstrap from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport Router from \"next/router\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Input from \"../../components/Input\";\nimport { formatDate } from \"../../utils/Formatters\";\nimport { setCurrentUser } from \"./../../services/authService\";\nimport { LoginSchema, RegisterSchema } from \"./validation\";\n\nvar LoginForm = function LoginForm(_ref) {\n  var login = _ref.login,\n      isLogin = _ref.isLogin,\n      onSetLogin = _ref.onSetLogin,\n      apolloClient = _ref.apolloClient;\n\n  var _useState = useState({\n    birthday: new Date()\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var handleSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(values) {\n      var variables, res, action;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              variables = isLogin ? values : _objectSpread({}, values, {\n                birthday: formatDate(state.birthday, \"yyyy-mm-dd\")\n              });\n              _context.next = 4;\n              return login({\n                variables: variables\n              });\n\n            case 4:\n              res = _context.sent;\n\n              if (!res.data.login && !res.data.registerUser) {\n                alert(\"Login Failed!\");\n              } else {\n                action = isLogin ? \"login\" : \"registerUser\";\n                setCurrentUser(res.data[action].token);\n                apolloClient.cache.reset().then(function () {\n                  Router.replace(\"/\");\n                });\n              }\n\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              alert(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      name: \"\",\n      surname: \"\",\n      role: \"user\"\n    },\n    validationSchema: isLogin ? LoginSchema : RegisterSchema,\n    onSubmit: handleSubmit\n  }, function (_ref3) {\n    var errors = _ref3.errors,\n        touched = _ref3.touched;\n    return React.createElement(Form, null, React.createElement(Bootstrap.Form.Group, {\n      style: {\n        margin: 200,\n        marginLeft: 600,\n        marginRight: 600\n      }\n    }, React.createElement(Input, {\n      name: \"email\",\n      label: \"Email address\",\n      touched: touched,\n      errors: errors\n    }), React.createElement(Input, {\n      name: \"password\",\n      isPassword: true,\n      label: \"Password\",\n      touched: touched,\n      errors: errors\n    }), !isLogin ? React.createElement(React.Fragment, null, React.createElement(Input, {\n      name: \"name\",\n      label: \"Name\",\n      touched: touched,\n      errors: errors\n    }), React.createElement(Input, {\n      name: \"surname\",\n      label: \"Surname\",\n      touched: touched,\n      errors: errors\n    }), React.createElement(\"label\", {\n      htmlFor: \"birthday\"\n    }, \"Birthday\"), React.createElement(\"div\", {\n      className: \"form-group\"\n    }, React.createElement(DatePicker, {\n      dateFormat: \"yyyy/MM/dd\",\n      name: \"birthday\",\n      className: \"form-control\",\n      selected: state.birthday,\n      onChange: function onChange(date) {\n        return setState(_objectSpread({}, state, {\n          birthday: date\n        }));\n      }\n    }))) : null, React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        marginTop: 30\n      }\n    }, React.createElement(Bootstrap.Button, {\n      type: \"submit\",\n      className: \"center\"\n    }, isLogin ? \"Login\" : \"Register\")), React.createElement(\"div\", {\n      style: {\n        marginTop: 50\n      }\n    }, isLogin ? React.createElement(\"small\", {\n      className: \"form-text text-muted clickable\",\n      style: {\n        textAlign: \"center\"\n      },\n      onClick: function onClick() {\n        return onSetLogin(false);\n      }\n    }, \"Don't you have an account ?\") : React.createElement(\"small\", {\n      style: {\n        textAlign: \"center\"\n      },\n      className: \"form-text text-muted clickable\",\n      onClick: function onClick() {\n        return onSetLogin(true);\n      }\n    }, \"\\u0130f you have an account, click to login\"))));\n  });\n};\n\nexport default LoginForm;","map":{"version":3,"sources":["D:\\Projeler\\na_brno_dobry\\pages\\login\\index.tsx"],"names":["React","useState","Formik","Form","Bootstrap","DatePicker","Router","Input","formatDate","setCurrentUser","LoginSchema","RegisterSchema","LoginForm","login","isLogin","onSetLogin","apolloClient","birthday","Date","state","setState","handleSubmit","values","variables","res","data","registerUser","alert","action","token","cache","reset","then","replace","email","password","name","surname","role","errors","touched","margin","marginLeft","marginRight","date","position","marginTop","textAlign"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Bootstrap from \"react-bootstrap\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport Router from \"next/router\";\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport Input from \"../../components/Input\";\r\nimport { formatDate } from \"../../utils/Formatters\";\r\nimport { setCurrentUser } from \"./../../services/authService\";\r\nimport { LoginSchema, RegisterSchema } from \"./validation\";\r\n\r\nexport interface ILoginFormProps {\r\n  login: (values: any) => Promise<any>;\r\n  isLogin: boolean;\r\n  onSetLogin: (value: boolean) => any;\r\n  apolloClient: ApolloClient<any>;\r\n}\r\n\r\nconst LoginForm: React.SFC<ILoginFormProps> = ({\r\n  login,\r\n  isLogin,\r\n  onSetLogin,\r\n  apolloClient\r\n}) => {\r\n  const [state, setState] = useState({\r\n    birthday: new Date()\r\n  });\r\n\r\n  const handleSubmit = async (values: any) => {\r\n    try {\r\n      const variables = isLogin\r\n        ? values\r\n        : {\r\n            ...values,\r\n            birthday: formatDate(state.birthday, \"yyyy-mm-dd\")\r\n          };\r\n      const res = await login({ variables });\r\n      if (!res.data.login && !res.data.registerUser) {\r\n        alert(\"Login Failed!\");\r\n      } else {\r\n        const action = isLogin ? \"login\" : \"registerUser\";\r\n        setCurrentUser(res.data[action].token);\r\n        apolloClient.cache.reset().then(() => {\r\n          Router.replace(\"/\");\r\n        });\r\n      }\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: \"\",\r\n        password: \"\",\r\n        name: \"\",\r\n        surname: \"\",\r\n        role: \"user\"\r\n      }}\r\n      validationSchema={isLogin ? LoginSchema : RegisterSchema}\r\n      onSubmit={handleSubmit}>\r\n      {({ errors, touched }) => (\r\n        <Form>\r\n          <Bootstrap.Form.Group\r\n            style={{ margin: 200, marginLeft: 600, marginRight: 600 }}>\r\n            <Input\r\n              name='email'\r\n              label='Email address'\r\n              touched={touched}\r\n              errors={errors}\r\n            />\r\n            <Input\r\n              name='password'\r\n              isPassword={true}\r\n              label='Password'\r\n              touched={touched}\r\n              errors={errors}\r\n            />\r\n            {!isLogin ? (\r\n              <>\r\n                <Input\r\n                  name='name'\r\n                  label='Name'\r\n                  touched={touched}\r\n                  errors={errors}\r\n                />\r\n                <Input\r\n                  name='surname'\r\n                  label='Surname'\r\n                  touched={touched}\r\n                  errors={errors}\r\n                />\r\n                <label htmlFor='birthday'>Birthday</label>\r\n                <div className='form-group'>\r\n                  <DatePicker\r\n                    dateFormat='yyyy/MM/dd'\r\n                    name='birthday'\r\n                    className='form-control'\r\n                    selected={state.birthday}\r\n                    onChange={date => setState({ ...state, birthday: date! })}\r\n                  />\r\n                </div>\r\n              </>\r\n            ) : null}\r\n            <div style={{ position: \"relative\", marginTop: 30 }}>\r\n              <Bootstrap.Button type='submit' className='center'>\r\n                {isLogin ? \"Login\" : \"Register\"}\r\n              </Bootstrap.Button>\r\n            </div>\r\n            <div style={{ marginTop: 50 }}>\r\n              {isLogin ? (\r\n                <small\r\n                  className='form-text text-muted clickable'\r\n                  style={{ textAlign: \"center\" }}\r\n                  onClick={() => onSetLogin(false)}>\r\n                  Don't you have an account ?\r\n                </small>\r\n              ) : (\r\n                <small\r\n                  style={{ textAlign: \"center\" }}\r\n                  className='form-text text-muted clickable'\r\n                  onClick={() => onSetLogin(true)}>\r\n                  İf you have an account, click to login\r\n                </small>\r\n              )}\r\n            </div>\r\n          </Bootstrap.Form.Group>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}