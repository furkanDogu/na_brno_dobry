{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { ApolloClient, InMemoryCache } from \"apollo-boost\";\nimport fetch from \"isomorphic-unfetch\";\nimport { setContext } from \"apollo-link-context\";\nimport { createHttpLink } from \"apollo-link-http\";\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (typeof window === \"undefined\") {\n  //@ts-ignore\n  global.fetch = fetch;\n}\n\nvar create = function create(initialState, options) {\n  var isBrowser = typeof window !== \"undefined\";\n  var httpLink = createHttpLink({\n    uri: \"http://localhost:4000\",\n    credentials: \"same-origin\"\n  });\n  var authLink = setContext(function (_, _ref) {\n    var headers = _ref.headers;\n    // get the authentication token from local storage if it exists\n    var token = options.getToken(); // return the headers to the context so httpLink can read them\n\n    return {\n      headers: _objectSpread({}, headers, {\n        auth_token: token\n      })\n    };\n  });\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n};\n\nexport default function initApollo(initialState, options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === \"undefined\") {\n    return create(initialState, options);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["D:\\Projeler\\na_brno_dobry\\libs\\Apollo\\initApollo.ts"],"names":["ApolloClient","InMemoryCache","fetch","setContext","createHttpLink","apolloClient","window","global","create","initialState","options","isBrowser","httpLink","uri","credentials","authLink","_","headers","token","getToken","auth_token","connectToDevTools","ssrMode","link","concat","cache","restore","initApollo"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,cAA5C;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,IAAIC,YAAiB,GAAG,IAAxB,C,CAEA;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACAC,EAAAA,MAAM,CAACL,KAAP,GAAeA,KAAf;AACD;;AAED,IAAMM,MAAM,GAAG,SAATA,MAAS,CAACC,YAAD,EAAoBC,OAApB,EAAqC;AAClD,MAAMC,SAAS,GAAG,OAAOL,MAAP,KAAkB,WAApC;AAEA,MAAMM,QAAQ,GAAGR,cAAc,CAAC;AAC9BS,IAAAA,GAAG,EAAE,uBADyB;AAE9BC,IAAAA,WAAW,EAAE;AAFiB,GAAD,CAA/B;AAKA,MAAMC,QAAQ,GAAGZ,UAAU,CAAC,UAACa,CAAD,QAAoB;AAAA,QAAdC,OAAc,QAAdA,OAAc;AAC9C;AACA,QAAMC,KAAK,GAAGR,OAAO,CAACS,QAAR,EAAd,CAF8C,CAG9C;;AACA,WAAO;AACLF,MAAAA,OAAO,oBACFA,OADE;AAELG,QAAAA,UAAU,EAAEF;AAFP;AADF,KAAP;AAMD,GAV0B,CAA3B;AAWA,SAAO,IAAIlB,YAAJ,CAAiB;AACtBqB,IAAAA,iBAAiB,EAAEV,SADG;AAEtBW,IAAAA,OAAO,EAAE,CAACX,SAFY;AAED;AACrBY,IAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBZ,QAAhB,CAHgB;AAItBa,IAAAA,KAAK,EAAE,IAAIxB,aAAJ,GAAoByB,OAApB,CAA4BjB,YAAY,IAAI,EAA5C;AAJe,GAAjB,CAAP;AAMD,CAzBD;;AA2BA,eAAe,SAASkB,UAAT,CAAoBlB,YAApB,EAAuCC,OAAvC,EAAqD;AAClE;AACA;AACA,MAAI,OAAOJ,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOE,MAAM,CAACC,YAAD,EAAeC,OAAf,CAAb;AACD,GALiE,CAOlE;;;AACA,MAAI,CAACL,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGG,MAAM,CAACC,YAAD,EAAeC,OAAf,CAArB;AACD;;AAED,SAAOL,YAAP;AACD","sourcesContent":["import { ApolloClient, InMemoryCache } from \"apollo-boost\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport { setContext } from \"apollo-link-context\";\r\nimport { createHttpLink } from \"apollo-link-http\";\r\n\r\nlet apolloClient: any = null;\r\n\r\n// Polyfill fetch() on the server (used by apollo-client)\r\nif (typeof window === \"undefined\") {\r\n  //@ts-ignore\r\n  global.fetch = fetch;\r\n}\r\n\r\nconst create = (initialState: any, options: any) => {\r\n  const isBrowser = typeof window !== \"undefined\";\r\n\r\n  const httpLink = createHttpLink({\r\n    uri: \"http://localhost:4000\",\r\n    credentials: \"same-origin\"\r\n  });\r\n\r\n  const authLink = setContext((_, { headers }) => {\r\n    // get the authentication token from local storage if it exists\r\n    const token = options.getToken();\r\n    // return the headers to the context so httpLink can read them\r\n    return {\r\n      headers: {\r\n        ...headers,\r\n        auth_token: token\r\n      }\r\n    };\r\n  });\r\n  return new ApolloClient({\r\n    connectToDevTools: isBrowser,\r\n    ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache().restore(initialState || {})\r\n  });\r\n};\r\n\r\nexport default function initApollo(initialState: any, options: any) {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections (which would be bad)\r\n  if (typeof window === \"undefined\") {\r\n    return create(initialState, options);\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!apolloClient) {\r\n    apolloClient = create(initialState, options);\r\n  }\r\n\r\n  return apolloClient;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}