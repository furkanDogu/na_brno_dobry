{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation updateProduct(\\n    $name: String!\\n    $price: Float!\\n    $productId: String!\\n    $categoryId: String!\\n  ) {\\n    updateProduct(\\n      name: $name\\n      price: $price\\n      productId: $productId\\n      categoryId: $categoryId\\n    ) {\\n      id\\n      name\\n      price\\n      category {\\n        id\\n        name\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\nimport UpdateProductSection from \".\";\nvar UPDATE_PRODUCT_MUTATION = gql(_templateObject());\n\nvar UpdateProductGQL = function UpdateProductGQL(_ref) {\n  var params = _ref.params,\n      dataFetched = _ref.dataFetched,\n      closeModal = _ref.closeModal;\n  return React.createElement(React.Fragment, null, React.createElement(Mutation, {\n    mutation: UPDATE_PRODUCT_MUTATION\n  }, function (updateProduct) {\n    return React.createElement(UpdateProductSection, {\n      closeModal: closeModal,\n      dataFetched: dataFetched,\n      params: params,\n      onUpdate: function onUpdate(values) {\n        return updateProduct(values);\n      }\n    });\n  }));\n};\n\nexport default UpdateProductGQL;","map":{"version":3,"sources":["D:\\Projeler\\na_brno_dobry\\pages\\products\\UpdateProductSection\\graphql.tsx"],"names":["React","gql","Mutation","UpdateProductSection","UPDATE_PRODUCT_MUTATION","UpdateProductGQL","params","dataFetched","closeModal","updateProduct","values"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAqC,cAArC;AAEA,OAAOC,oBAAP,MAAiC,GAAjC;AAEA,IAAMC,uBAAuB,GAAGH,GAAH,mBAA7B;;AAuBA,IAAMI,gBAA2B,GAAG,SAA9BA,gBAA8B,OAIzB;AAAA,MAHTC,MAGS,QAHTA,MAGS;AAAA,MAFTC,WAES,QAFTA,WAES;AAAA,MADTC,UACS,QADTA,UACS;AACT,SACE,0CACE,oBAAC,QAAD;AAAsB,IAAA,QAAQ,EAAEJ;AAAhC,KACG,UAAAK,aAAa;AAAA,WACZ,oBAAC,oBAAD;AACE,MAAA,UAAU,EAAED,UADd;AAEE,MAAA,WAAW,EAAED,WAFf;AAGE,MAAA,MAAM,EAAED,MAHV;AAIE,MAAA,QAAQ,EAAE,kBAAAI,MAAM;AAAA,eAAID,aAAa,CAACC,MAAD,CAAjB;AAAA;AAJlB,MADY;AAAA,GADhB,CADF,CADF;AAcD,CAnBD;;AAqBA,eAAeL,gBAAf","sourcesContent":["import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Mutation, MutationFn } from \"react-apollo\";\r\n\r\nimport UpdateProductSection from \".\";\r\n\r\nconst UPDATE_PRODUCT_MUTATION = gql`\r\n  mutation updateProduct(\r\n    $name: String!\r\n    $price: Float!\r\n    $productId: String!\r\n    $categoryId: String!\r\n  ) {\r\n    updateProduct(\r\n      name: $name\r\n      price: $price\r\n      productId: $productId\r\n      categoryId: $categoryId\r\n    ) {\r\n      id\r\n      name\r\n      price\r\n      category {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateProductGQL: React.SFC = ({\r\n  params,\r\n  dataFetched,\r\n  closeModal\r\n}: any) => {\r\n  return (\r\n    <>\r\n      <Mutation<MutationFn> mutation={UPDATE_PRODUCT_MUTATION}>\r\n        {updateProduct => (\r\n          <UpdateProductSection\r\n            closeModal={closeModal}\r\n            dataFetched={dataFetched}\r\n            params={params}\r\n            onUpdate={values => updateProduct(values)}\r\n          />\r\n        )}\r\n      </Mutation>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateProductGQL;\r\n"]},"metadata":{},"sourceType":"module"}