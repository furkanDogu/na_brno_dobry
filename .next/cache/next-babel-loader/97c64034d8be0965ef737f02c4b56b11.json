{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React, { useContext } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Bootstrap from \"react-bootstrap\";\nimport Select from \"../../../components/Select\";\nimport Input from \"../../../components/Input\";\nimport { NewProductSchema } from \"./validation\";\nimport { UserContext } from \"./../../../libs/authentication/UserContext\";\n\nvar NewProductSection = function NewProductSection(_ref) {\n  var options = _ref.options,\n      onAddProduct = _ref.onAddProduct;\n  var user = useContext(UserContext);\n  return React.createElement(Formik, {\n    initialValues: {\n      name: \"\",\n      price: \"\",\n      categoryId: options[0].id\n    },\n    validationSchema: NewProductSchema,\n    onSubmit:\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var resetForm, copiedValues;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resetForm = _ref2.resetForm;\n                // TODO: Check if user is admin then can add products for others.\n                copiedValues = _objectSpread({}, values, {\n                  price: _parseFloat(values.price),\n                  ownerId: user.id\n                });\n                _context.next = 4;\n                return onAddProduct({\n                  variables: copiedValues\n                });\n\n              case 4:\n                resetForm();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  }, function (_ref4) {\n    var errors = _ref4.errors,\n        touched = _ref4.touched;\n    return React.createElement(Form, {\n      className: \"center\"\n    }, React.createElement(Bootstrap.Form.Group, {\n      style: {\n        margin: 100,\n        marginLeft: 150,\n        marginRight: 150\n      }\n    }, React.createElement(Input, {\n      name: \"name\",\n      label: \"Product's name\",\n      touched: touched,\n      errors: errors\n    }), React.createElement(Input, {\n      name: \"price\",\n      label: \"Product's price\",\n      touched: touched,\n      errors: errors\n    }), React.createElement(Select, {\n      options: options,\n      name: \"categoryId\",\n      label: \"Category\"\n    }), React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        marginTop: 30\n      }\n    }, React.createElement(Bootstrap.Button, {\n      type: \"submit\",\n      className: \"center\"\n    }, \"Add Product\"))));\n  });\n};\n\nexport default NewProductSection;","map":{"version":3,"sources":["D:\\Projeler\\na_brno_dobry\\pages\\products\\NewProductSection\\index.tsx"],"names":["React","useContext","Formik","Form","Bootstrap","Select","Input","NewProductSchema","UserContext","NewProductSection","options","onAddProduct","user","name","price","categoryId","id","values","resetForm","copiedValues","ownerId","variables","errors","touched","margin","marginLeft","marginRight","position","marginTop"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,OAAO,KAAKC,SAAZ,MAA2B,iBAA3B;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,SAASC,gBAAT,QAAiC,cAAjC;AACA,SAASC,WAAT,QAA4B,4CAA5B;;AAOA,IAAMC,iBAAgD,GAAG,SAAnDA,iBAAmD,OAGnD;AAAA,MAFJC,OAEI,QAFJA,OAEI;AAAA,MADJC,YACI,QADJA,YACI;AACJ,MAAMC,IAAI,GAAGX,UAAU,CAACO,WAAD,CAAvB;AACA,SACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbK,MAAAA,IAAI,EAAE,EADO;AAEbC,MAAAA,KAAK,EAAE,EAFM;AAGbC,MAAAA,UAAU,EAAEL,OAAO,CAAC,CAAD,CAAP,CAAWM;AAHV,KADjB;AAME,IAAA,gBAAgB,EAAET,gBANpB;AAOE,IAAA,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAE,iBAAOU,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBC,gBAAAA,SAAjB,SAAiBA,SAAjB;AACR;AACMC,gBAAAA,YAFE,qBAGHF,MAHG;AAINH,kBAAAA,KAAK,EAAE,YAAWG,MAAM,CAACH,KAAlB,CAJD;AAKNM,kBAAAA,OAAO,EAAER,IAAI,CAAEI;AALT;AAAA;AAAA,uBAQFL,YAAY,CAAC;AACjBU,kBAAAA,SAAS,EAAEF;AADM,iBAAD,CARV;;AAAA;AAWRD,gBAAAA,SAAS;;AAXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA;AAPV,KAoBG;AAAA,QAAGI,MAAH,SAAGA,MAAH;AAAA,QAAWC,OAAX,SAAWA,OAAX;AAAA,WACC,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE,oBAAC,SAAD,CAAW,IAAX,CAAgB,KAAhB;AACE,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,GAAV;AAAeC,QAAAA,UAAU,EAAE,GAA3B;AAAgCC,QAAAA,WAAW,EAAE;AAA7C;AADT,OAEE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,kBAFP;AAGE,MAAA,OAAO,EAAEH,OAHX;AAIE,MAAA,MAAM,EAAED;AAJV,MAFF,EAQE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,KAAK,mBAFP;AAGE,MAAA,OAAO,EAAEC,OAHX;AAIE,MAAA,MAAM,EAAED;AAJV,MARF,EAcE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEZ,OAAjB;AAA0B,MAAA,IAAI,EAAC,YAA/B;AAA4C,MAAA,KAAK,EAAC;AAAlD,MAdF,EAeE;AAAK,MAAA,KAAK,EAAE;AAAEiB,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,SAAS,EAAE;AAAnC;AAAZ,OACE,oBAAC,SAAD,CAAW,MAAX;AAAkB,MAAA,IAAI,EAAC,QAAvB;AAAgC,MAAA,SAAS,EAAC;AAA1C,qBADF,CAfF,CADF,CADD;AAAA,GApBH,CADF;AAgDD,CArDD;;AAuDA,eAAenB,iBAAf","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Bootstrap from \"react-bootstrap\";\r\n\r\nimport Select from \"../../../components/Select\";\r\nimport Input from \"../../../components/Input\";\r\nimport { NewProductSchema } from \"./validation\";\r\nimport { UserContext } from \"./../../../libs/authentication/UserContext\";\r\n\r\ninterface INewProductSection {\r\n  options: { id: string; name: string }[];\r\n  onAddProduct(values: any): any;\r\n}\r\n\r\nconst NewProductSection: React.SFC<INewProductSection> = ({\r\n  options,\r\n  onAddProduct\r\n}) => {\r\n  const user = useContext(UserContext);\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        price: \"\",\r\n        categoryId: options[0].id\r\n      }}\r\n      validationSchema={NewProductSchema}\r\n      onSubmit={async (values, { resetForm }) => {\r\n        // TODO: Check if user is admin then can add products for others.\r\n        const copiedValues = {\r\n          ...values,\r\n          price: parseFloat(values.price),\r\n          ownerId: user!.id\r\n        };\r\n\r\n        await onAddProduct({\r\n          variables: copiedValues\r\n        });\r\n        resetForm();\r\n      }}>\r\n      {({ errors, touched }) => (\r\n        <Form className='center'>\r\n          <Bootstrap.Form.Group\r\n            style={{ margin: 100, marginLeft: 150, marginRight: 150 }}>\r\n            <Input\r\n              name='name'\r\n              label={`Product's name`}\r\n              touched={touched}\r\n              errors={errors}\r\n            />\r\n            <Input\r\n              name='price'\r\n              label={`Product's price`}\r\n              touched={touched}\r\n              errors={errors}\r\n            />\r\n            <Select options={options} name='categoryId' label='Category' />\r\n            <div style={{ position: \"relative\", marginTop: 30 }}>\r\n              <Bootstrap.Button type='submit' className='center'>\r\n                Add Product\r\n              </Bootstrap.Button>\r\n            </div>\r\n          </Bootstrap.Form.Group>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default NewProductSection;\r\n"]},"metadata":{},"sourceType":"module"}